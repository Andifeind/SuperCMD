import Colorfy from 'colorfy'
import * as Table from 'easy-table'

export class SuperCommand
  constructor ()
    this.optionRegExp = /(?:(-\w),?\s*)?(--[\w-]+)(?:\s*\[(\w+)\])?(?:\s*\<(\w+)\>)?/
    this._opts = []

  cwd (workingDir)
    this.workingDir = workingDir

  usage (str)
    this._usage = str
    return this

  description (str)
    this._desc = str
    return this

  option (option, description, defaultValue, fn)
    const opt = this.optionRegExp.capture(option, {
      1: 'alias'
      2: 'name'
      3: 'required'
      4: 'optional'
    })

    this._opts.push({
      alias: opt.alias ? opt.alias.substr(1) : null
      name: opt.name.substr(2)
      type: opt.required || opt.optional || 'bool'
      key: this.camelCaseArg(opt.name)
      required: opt.required ? true : false
      description: description
      defaultValue: defaultValue,
      fn: fn
    })

    return this

  renderHelpPage ()
    const cf = new Colorfy()

    if this._desc
      cf.txt(this._desc).nl(2)

    cf.lgrey('Usage: ').llgrey(this._usage || 'command [options]').nl(2)
    cf.lgrey('Options: ').nl(2)

    const table = new Table()
    for opt of this._opts
      const arg = opt.alias ? '-${opt.alias}, --${opt.name}' : '    --${opt.name}'
      table.cell('Name', arg)
      table.cell('Description', opt.description)
      table.newRow()

    cf.txt(table.print())
    return cf.colorfy()

  parse (argv)
    this.addDefaultOpts()
    const args = this.parseArgv(argv)
    console.log(this.renderHelpPage())

  camelCaseArg (str)
    return str.replace(/^-+/, '').replace(/-+(\w)/g, (match, char) =>
      return char.toUpperCase()
    )

  addDefaultOpts ()
    this.option('--no-color', 'Disable colorized output')
    this.option('--version', 'Print version')

  parseValue (value, type)
    if type === 'num'
      return Number(value)
    elif type === 'list'
      return value.split(/,/g)
    else
      return value

  parseArgv (argv)
    const args =
      _: argv[0]
      command: argv[1]
      args: []

    const actionReg = /^\w+(-\w)*$/
    const argReg = /^-+\w+(-\w)*$/

    let startIndex = 2
    if actionReg.test(argv[2])
      args.action = argv[2]
      startIndex = 3

    for i = startIndex; i < argv.length; i++
      const arg = argv[i]
      if arg.startsWith('-')
        const key = this.camelCaseArg(argv[i])
        const opt = this.getOption(key)

        if !opt
          throw new Error('Argument ${arg} is not a valid argument')
        elif opt.type === 'bool'
          args[opt.key] = true

        else
          const nextArg = argv[i + 1]
          if !nextArg || argReg.test(nextArg)
            throw new Error('Argument ${arg} expects a value')
          else
            args[opt.key] = this.parseValue(nextArg, opt.type)
            i += 1
      else
        args.args.push(arg)

    return args


  getOption (key, prop)
    return this._opts.find((item) =>
      return key.length === 1 ? item.alias === key : item.key === key
    )
