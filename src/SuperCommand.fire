import Colorfy from 'colorfy'
import * as Table from 'easy-table'

export class SuperCommand
  constructor ()
    this.optionRegExp = /(?:(-\w),?\s*)?(--[\w-]+)(?:\s*\[(\w+)\])?(?:\s*\<(\w+)\>)?/
    this.commandRegExp = /(\*|[\w-]+)|(?:\s*\[(\w+)\])|(?:\s*\<(\w+)\>)/g
    this._opts = []
    this._cmd = {}

  cwd (workingDir)
    this.workingDir = workingDir

  usage (str)
    this._usage = str
    return this

  description (str)
    this._desc = str
    return this

  option (option, description, defaultValue, fn)
    const opt = this.optionRegExp.capture(option, {
      1: 'alias'
      2: 'name'
      3: 'optional'
      4: 'required'
    })

    this._opts.push({
      alias: opt.alias ? opt.alias.substr(1) : null
      name: opt.name.substr(2)
      type: opt.required || opt.optional || 'bool'
      key: this.camelCaseArg(opt.name)
      required: opt.required ? true : false
      description: description
      defaultValue: defaultValue,
      fn: fn
    })

    return this

  action (fn)
    this._actionFn = fn
    return this

  cmd (cmd)
    const subcommand = new SuperCommand()
    subcommand.parseCommand(cmd)

    this._cmd[subcommand._action] = subcommand
    return subcommand

  renderHelpPage ()
    const cf = new Colorfy()

    if this._desc
      cf.txt(this._desc).nl(2)

    cf.lgrey('Usage: ').llgrey(this._usage || 'command [options]').nl(2)
    cf.lgrey('Options: ').nl(2)

    const table = new Table()
    for opt of this._opts
      const arg = opt.alias ? '-${opt.alias}, --${opt.name}' : '    --${opt.name}'
      table.cell('Name', arg)
      table.cell('Description', opt.description)
      table.newRow()

    cf.txt(table.print())
    return cf.colorfy()

  parse (argv)
    const args = this.parseArgv(argv)

    this.addDefaultOpts()

    if args.action
      const cmd = this._cmd[args.action]
      if !cmd
        throw new Error('Subcommand ${args.action} not found!')

      cmd.callAction(args)
    elif this._cmd['*']
      this._cmd['*'].callAction(args)
    else
      this.printCommandsList()

  callAction (args)
    const ctx = {
      command: args.command
      action: args.action || 'default'
    }

    const fnArgs = [args].concat(args.args)

    this._actionFn.apply(this, fnArgs)


  camelCaseArg (str)
    return str.replace(/^-+/, '').replace(/-+(\w)/g, (match, char) =>
      return char.toUpperCase()
    )

  addDefaultOpts ()
    this.option('--no-color', 'Disable colorized output')
    this.option('--version', 'Print version')

  parseValue (value, type)
    if type === 'num'
      return Number(value)
    elif type === 'list'
      return value.split(/,/g)
    else
      return value

  parseArgv (argv)
    const args =
      _: argv[0]
      command: argv[1]
      args: []

    const actionReg = /^\w+(-\w)*$/
    const argReg = /^-+\w+(-\w)*$/

    let startIndex = 2
    if actionReg.test(argv[2])
      args.action = argv[2]
      startIndex = 3

    const cmd = args.action ? this._cmd[args.action] : this._cmd['*'] || this

    for i = startIndex; i < argv.length; i++
      const arg = argv[i]
      if arg.startsWith('-')
        const key = this.camelCaseArg(argv[i])
        const opt = cmd.getOption(key)

        if !opt
          throw new Error('Argument ${arg} is not a valid argument')
        elif opt.type === 'bool'
          args[opt.key] = true
        else
          const nextArg = argv[i + 1]
          if !nextArg || argReg.test(nextArg)
            throw new Error('Argument ${arg} expects a value')
          else
            args[opt.key] = this.parseValue(nextArg, opt.type)
            i += 1
      else
        args.args.push(arg)

    return args

  getOption (key, prop)
    return this._opts.find((item) =>
      return key.length === 1 ? item.alias === key : item.key === key
    )

  parseCommand (cmdStr)
    const caps = this.commandRegExp.capture(cmdStr, {
      1: 'command'
      2: 'optional'
      3: 'required'
    })

    if caps[0].command
      this._action = caps[0].command
      caps.shift()

    this._cmdArgs = caps.map((item) =>
      return {
        type: item.required || item.optional
        required: !!item.required
      }
    )

    return this

  printCommandsList ()
    let longest = 0
    const commandKeys = Object
      .keys(this._cmd)
      .filter((key) =>
        return !['*', 'commands'].includes(key)
      )
      .sort()

    const commands = commandKeys.map((key) =>
      const cmd = this._cmd[key]
      longest = Math.max(longest, cmd._action.length)
      const res =
        action: cmd._action
        description: cmd._desc

      return res
    )

    const cf = new Colorfy()
    cf.txt('Commands:').nl()
    commands.forEach((c) =>
      cf
        .yellow(c.action)
        .txt(' '.repeat(longest - c.action.length + 2))
        .lgrey(c.description)
        .nl()
    )

    cf.print()
