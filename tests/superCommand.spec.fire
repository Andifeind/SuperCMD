import * as inspect from 'inspect.js'
import SuperCommand from '../src/SuperCommand'

describe('SuperCommand', () =>
  describe('camelCaseStr()', () =>
    it('returns a camelcased string', () =>
      const sc = new SuperCommand()
      inspect(sc.camelCaseArg('foo-bar')).isEql('fooBar')
      inspect(sc.camelCaseArg('foo-bar-bla')).isEql('fooBarBla')
      inspect(sc.camelCaseArg('foo--bar---bla')).isEql('fooBarBla')
      inspect(sc.camelCaseArg('--foo-bar-bla')).isEql('fooBarBla')
    )
  )

  describe('parseArgv()', () =>
    let sc

    beforeEach(() =>
      sc = new SuperCommand()
      sc.option('--foo <str>', 'Test')
      sc.option('-b, --bla', 'Test')
      sc.option('--without-anything', 'Test')
    )

    it('parse argv array', () =>
      const argvArr = [
        '/usr/local/bin/node',
        'firetest',
        '--foo',
        'bar',
        '-b'
        '--without-anything'
        'prop1',
        'prop2'
      ]

      const args = sc.parseArgv(argvArr)
      inspect(args).isEql({
        _: '/usr/local/bin/node'
        command: 'firetest'
        foo: 'bar'
        bla: true
        withoutAnything: true
        args: [ 'prop1', 'prop2' ]
      })
    )

    it('parse argv array with an action', () =>
      const argvArr = [
        '/usr/local/bin/node',
        'firetest',
        'run',
        '--foo',
        'bar',
        '-b'
        '--without-anything'
        'prop1',
        'prop2'
      ]

      const args = sc.parseArgv(argvArr)
      inspect(args).isEql({
        _: '/usr/local/bin/node'
        command: 'firetest'
        action: 'run'
        foo: 'bar'
        bla: true
        withoutAnything: true
        args: [ 'prop1', 'prop2' ]
      })
    )

    it('parse argv array with a missing value', () =>
      const argvArr = [
        '/usr/local/bin/node',
        'firetest',
        '--foo'
      ]

      inspect(sc.parseArgv).withArgsOn(sc, argvArr).doesThrow('Argument --foo expects a value')
    )
  )

  describe('parseCommand()', () =>
    it('parse a command', () =>
      const sc = new SuperCommand()
      const cmd = sc.parseCommand('foo <str> [str]')
      inspect(sc).hasProps({
        _action: 'foo'
        _cmdArgs: [{
          type: 'str'
          required: true
        }, {
          type: 'str'
          required: false
        }]
      })
    )

    it('parse a default command', () =>
      const sc = new SuperCommand()
      const cmd = sc.parseCommand('* <str> [str]')
      inspect(sc).hasProps({
        _action: '*'
        _cmdArgs: [{
          type: 'str'
          required: true
        }, {
          type: 'str'
          required: false
        }]
      })
    )

    it('parse a default command', () =>
      const sc = new SuperCommand()
      const cmd = sc.parseCommand('bla')
      inspect(sc).hasProps({
        _action: 'bla'
        _cmdArgs: []
      })
    )
  )

  describe('parse()', () =>
    let sc

    beforeEach(() =>
      sc = new SuperCommand()
      sc.option('--foo', 'Test')
      sc.option('-b, --bla', 'Test')
      sc.option('--without-anything', 'Test')
    )

    it('calls a default action', (done) =>
      sc.action((ctx, ...args) =>
        inspect(ctx).isObject()
        inspect(ctx).hasProps({
          foo: true
          bla: true
        })

        inspect(args).isArray()
        inspect(args).isEql([
          'prop1'
          'prop2'
        ])
        done()
      )

      const callArgs = sc.parseArgv([
        '/usr/local/bin/node',
        'firetest',
        '--foo',
        '-b'
        'prop1',
        'prop2'
      ])

      sc.callAction(callArgs)
    )
  )
)
